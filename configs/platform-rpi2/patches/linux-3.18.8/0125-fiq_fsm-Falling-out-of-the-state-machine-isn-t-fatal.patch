From 882abe61a8db1f204cb81fabe3ac047bddb67de3 Mon Sep 17 00:00:00 2001
From: P33M <P33M@github.com>
Date: Thu, 12 Feb 2015 11:20:00 +0000
Subject: [PATCH 125/193] fiq_fsm: Falling out of the state machine isn't fatal

This edge case can be hit if the port is disabled while the FIQ is
in the middle of a transaction. Make the effects less severe.

Also get rid of the useless return value.
---
 drivers/usb/host/dwc_otg/dwc_otg_hcd_intr.c | 20 +++++++-------------
 1 file changed, 7 insertions(+), 13 deletions(-)

diff --git a/drivers/usb/host/dwc_otg/dwc_otg_hcd_intr.c b/drivers/usb/host/dwc_otg/dwc_otg_hcd_intr.c
index d3eb444..492d4b7 100644
--- a/drivers/usb/host/dwc_otg/dwc_otg_hcd_intr.c
+++ b/drivers/usb/host/dwc_otg/dwc_otg_hcd_intr.c
@@ -2357,7 +2357,7 @@ int dwc_otg_fiq_unsetup_per_dma(dwc_otg_hcd_t *hcd, dwc_otg_qh_t *qh, dwc_otg_qt
  * different from the normal (messy) path. This function and its friends handles
  * channel cleanup and transaction completion from a FIQ transaction.
  */
-int32_t dwc_otg_hcd_handle_hc_fsm(dwc_otg_hcd_t *hcd, uint32_t num)
+void dwc_otg_hcd_handle_hc_fsm(dwc_otg_hcd_t *hcd, uint32_t num)
 {
 	struct fiq_channel_state *st = &hcd->fiq_state->channel[num];
 	dwc_hc_t *hc = hcd->hc_ptr_array[num];
@@ -2366,7 +2366,6 @@ int32_t dwc_otg_hcd_handle_hc_fsm(dwc_otg_hcd_t *hcd, uint32_t num)
 	dwc_otg_hc_regs_t *hc_regs = hcd->core_if->host_if->hc_regs[num];
 	hcint_data_t hcint = hcd->fiq_state->channel[num].hcint_copy;
 	int hostchannels  = 0;
-	int ret = 0;
 	fiq_print(FIQDBG_INT, hcd->fiq_state, "OUT %01d %01d ", num , st->fsm);
 
 	hostchannels = hcd->available_host_channels;
@@ -2380,7 +2379,6 @@ int32_t dwc_otg_hcd_handle_hc_fsm(dwc_otg_hcd_t *hcd, uint32_t num)
 		 * CLEAR_TT_BUFFER hub command if we were in the start-split phase.
 		 */
 		release_channel(hcd, hc, NULL, hc->halt_status);
-		ret = 1;
 		break;
 
 	case FIQ_NP_SPLIT_DONE:
@@ -2393,7 +2391,6 @@ int32_t dwc_otg_hcd_handle_hc_fsm(dwc_otg_hcd_t *hcd, uint32_t num)
 		} else if (hcint.b.nak) {
 			handle_hc_nak_intr(hcd, hc, hc_regs, qtd);
 		}
-		ret = 1;
 		break;
 
 	case FIQ_NP_SPLIT_HS_ABORTED:
@@ -2604,15 +2601,12 @@ int32_t dwc_otg_hcd_handle_hc_fsm(dwc_otg_hcd_t *hcd, uint32_t num)
 		break;
 
 	default:
-		local_fiq_disable();
-		DWC_WARN("unexpected state received on hc=%d fsm=%d", hc->hc_num, st->fsm);
-		BUG();
-	}
-	//if (hostchannels != hcd->available_host_channels) {
-		/* should have incremented by now! */
-	//	BUG();
-//	}
-	return ret;
+		DWC_WARN("Unexpected state received on hc=%d fsm=%d on transfer to device %d ep 0x%x", 
+					hc->hc_num, st->fsm, hc->dev_addr, hc->ep_num);
+		qtd->error_count++;
+		release_channel(hcd, hc, qtd, DWC_OTG_HC_XFER_NO_HALT_STATUS);
+	}
+	return;
 }
 
 /** Handles interrupt for a specific Host Channel */
-- 
2.1.4

